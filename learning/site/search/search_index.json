{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Masterpiece","text":"<p>Welcome to Learning Odyssey, an evolving resource dedicated to exploring the vast world of computer science, technology, and essential tools. This compendium is a living document, designed to grow and adapt alongside the ever-changing landscape of technology and my personal journey in mastering it.</p>"},{"location":"#purpose-and-scope","title":"Purpose and Scope","text":"<p>The purpose of this compendium is to serve as a comprehensive guide to the key concepts, technologies, and tools that are fundamental to computer science and software development. Whether you are a student, a seasoned professional, or someone with a keen interest in technology, this resource aims to provide valuable insights, structured knowledge, and practical guidance to help you navigate and excel in the field.</p>"},{"location":"#content-overview","title":"Content Overview","text":"<p>This compendium covers a wide range of topics, including but not limited to:</p> <ul> <li>Programming Languages: Detailed guides on various programming languages, including Python, Java, JavaScript, and more.</li> <li>Development Tools: Comprehensive documentation on essential tools such as Git, Docker, and Kubernetes.</li> <li>Cloud Computing: Insights into cloud platforms like Azure, AWS, and Google Cloud, with a focus on best practices and practical use cases.</li> <li>Computer Science Fundamentals: A thorough exploration of foundational topics, including algorithms, data structures, operating systems, and databases.</li> <li>Modern Technologies: An in-depth look at contemporary technologies such as artificial intelligence, machine learning, blockchain, and cybersecurity.   A Living Document</li> </ul> <p>One of the core principles of this compendium is its nature as a living document. It is continuously updated and expanded to reflect new learnings, emerging technologies, and the latest best practices in the field. By maintaining this dynamic approach, I aim to ensure that the compendium remains relevant, informative, and a reliable source of knowledge for years to come.</p> <p>Your Journey, Your Growth</p> <p>As you explore the topics within this compendium, I encourage you to approach each section with curiosity and an eagerness to learn. The world of computer science is vast and continually evolving, and there is always something new to discover and master. This compendium is not just a collection of information but a journey of growth, understanding, and continuous learning.</p> <p>Thank you for joining me on this educational journey. Let\u2019s embark together on the path to mastering the incredible world of computer science and technology.</p> <p>Happy Learning!</p>"},{"location":"aws/aws/","title":"AWS","text":"<p>Hello from AWS</p>"},{"location":"azure/azure/","title":"Azure","text":"<p>Azure This is a Azure page What up</p>"},{"location":"azure/certificationGuides/","title":"Azure Certification Guide for Developers","text":""},{"location":"azure/certificationGuides/#introduction","title":"Introduction","text":"<p>Microsoft Azure, a leading cloud platform, offers a comprehensive suite of services and tools that empower developers to build, deploy, and manage applications effectively. Achieving Azure certifications not only validates your cloud expertise but also enhances your career prospects in the ever-evolving tech landscape. This guide provides an overview of Azure certifications, the certification path for developers, and the key exams required to achieve these credentials.</p>"},{"location":"azure/certificationGuides/#why-get-azure-certified","title":"Why Get Azure Certified?","text":"<ul> <li>Validate Skills: Prove your proficiency in cloud technologies and Azure services.</li> <li>Career Advancement: Enhance your resume and open doors to new job opportunities.</li> <li>Industry Recognition: Gain recognition from peers and employers as an Azure expert.</li> <li>Continuous Learning: Stay updated with the latest Azure features and best practices.</li> </ul>"},{"location":"azure/certificationGuides/#certification-path-for-developers","title":"Certification Path for Developers","text":""},{"location":"azure/certificationGuides/#1-fundamentals-level","title":"1. Fundamentals Level","text":"<p>Azure Fundamentals (AZ-900)</p> <ul> <li>Description: This entry-level certification is ideal for individuals new to Azure or cloud computing. It covers basic concepts of cloud services, core Azure services, security, privacy, compliance, and pricing.</li> <li>Who Should Take It: Beginners in cloud computing, those exploring Azure, and anyone interested in validating their foundational knowledge of Azure.</li> </ul>"},{"location":"azure/certificationGuides/#2-associate-level","title":"2. Associate Level","text":"<p>Azure Developer Associate (AZ-204)</p> <ul> <li>Description: This certification focuses on designing, building, testing, and maintaining cloud applications and services on Azure. It covers a wide range of topics including Azure SDKs, application development, Azure Functions, and storage solutions.</li> <li>Who Should Take It: Developers with at least one year of experience in developing scalable solutions on Azure.</li> </ul>"},{"location":"azure/certificationGuides/#3-expert-level","title":"3. Expert Level","text":"<p>Azure Solutions Architect Expert (AZ-305)</p> <ul> <li>Description: This advanced certification validates your expertise in designing and implementing solutions that run on Microsoft Azure, including aspects like compute, network, storage, and security.</li> <li>Who Should Take It: Experienced developers or architects who design and implement solutions on Azure.</li> </ul>"},{"location":"azure/certificationGuides/#4-specialty-certifications","title":"4. Specialty Certifications","text":"<p>Azure AI Engineer Associate (AI-102)</p> <ul> <li>Description: This certification is focused on designing and implementing AI solutions that leverage Azure Cognitive Services, Azure Machine Learning, and knowledge mining.</li> <li>Who Should Take It: Developers or data scientists who want to specialize in AI and machine learning solutions on Azure.</li> </ul> <p>Azure DevOps Engineer Expert (AZ-400)</p> <ul> <li>Description: This certification combines people, processes, and technologies to continuously deliver valuable products and services that meet end-user needs and business objectives. It covers areas like Azure DevOps, version control, and CI/CD pipelines.</li> <li>Who Should Take It: Professionals aiming to blend development and operations to improve collaboration and productivity.</li> </ul>"},{"location":"azure/certificationGuides/#study-tips","title":"Study Tips","text":"<ol> <li>Understand the Exam Objectives: Review the skills measured section on the exam page to understand what topics will be covered.</li> <li>Hands-On Practice: Utilize Azure\u2019s free tier to get hands-on experience with the services and tools mentioned in the exams.</li> <li>Use Microsoft Learn: Microsoft Learn offers free, interactive, and self-paced learning paths to help you prepare.</li> <li>Join Study Groups: Engage with the community through study groups and forums to share knowledge and experiences.</li> <li>Practice Tests: Take practice exams to familiarize yourself with the exam format and identify areas for improvement.</li> </ol>"},{"location":"azure/certificationGuides/#conclusion","title":"Conclusion","text":"<p>Azure certifications provide a structured path for developers to gain and validate their cloud expertise. Whether you are just starting with Azure or looking to deepen your knowledge, there is a certification to help you achieve your goals. Use this guide to navigate your certification journey and leverage your skills to advance your career in the cloud.</p>"},{"location":"azure/az900/az900/","title":"Azure Fundamentals (AZ900)","text":"<p>https://github.com/bloomikko/AZ-900 https://myousufali.wordpress.com/wp-content/uploads/2020/09/az-900-cheatsheet.pdf</p>"},{"location":"azure/az900/az900/#external-resources","title":"External resources","text":""},{"location":"azure/az900/az900/#learning-resources","title":"Learning resources","text":"<p>Microsoft's learning path Undergroundwires' excellent bullet points of AZ-900</p>"},{"location":"azure/az900/az900/#practice-exams","title":"Practice exams","text":"<p>Microsoft's practice exam Thomas Mitchell's practice exam</p>"},{"location":"azure/az900/az900/#question-dumps","title":"Question dumps","text":"<p>Datawolf's question dumps (check the PDF) Exam Topics' questions IT Exams' questions Passnexam's questions</p>"},{"location":"azure/az900/azureResourseManager/","title":"Azure Resource Manager (ARM)","text":"<p>The service used for deployment and management in Azure</p> <ul> <li>Enables the creating, updating, and deletion of resources in an Azure account.</li> <li>Management features like access control, locks, and tags enable the securing and organiing of resources after deployment.</li> </ul>"},{"location":"azure/az900/azureResourseManager/#what-is-arm-for","title":"What is ARM for?","text":"<ul> <li>Provides consistency in managing resources.</li> <li>Provides convenience in managing resources.</li> <li>Provides control when managing resources.</li> <li>Provides confidence when managing resources.</li> <li>Provides capability for managing resources.</li> </ul>"},{"location":"azure/az900/azureResourseManager/#summary","title":"Summary","text":"<ul> <li>Auzre Resource Manager (ARM) is the service for deploying and managing resources in Azure.</li> <li>Azure Resource Manager (ARM) provides consitency, convenience, control, confidence and capability for Azure resource deployment.</li> <li>Azure Resource Manager (ARM) is the bridge between user and Azure resources.</li> </ul>"},{"location":"azure/az900/basics/","title":"Basics","text":""},{"location":"azure/az900/basics/#identity","title":"Identity","text":"<p>Identity refers to the information about an individual or entity that is used to uniquely identify them. In digital systems, an identity usually encompasses:</p> <ul> <li>Usernames or IDs: Unique identifiers assigned to users.</li> <li>Attributes: Information related to the user, such as their name, email address, roles, and permissions.</li> <li>Credentials: Data that the user provides to prove their identity, such as passwords, biometric data, or security tokens.   Identity is the foundation for establishing who is who in a digital system.</li> </ul>"},{"location":"azure/az900/basics/#authentication","title":"Authentication","text":"<p>Authentication is the process of verifying the identity of a user or entity. It ensures that the person or system accessing the resources is who they claim to be. There are various methods of authentication:</p> <ul> <li>Password-Based Authentication: The user provides a username and password.</li> <li>Multi-Factor Authentication (MFA): The user provides two or more verification methods, such as a password and a one-time code sent to their phone.</li> <li>Biometric Authentication: The user provides a biometric identifier, such as a fingerprint or facial recognition.</li> <li>Token-Based Authentication: The user provides a security token, which is often a generated string or a physical device.   Authentication answers the question: \"Are you who you say you are?\"</li> </ul>"},{"location":"azure/az900/basics/#authorization","title":"Authorization","text":"<p>Authorization is the process of determining what an authenticated user is allowed to do. Once the system knows who the user is (via authentication), it checks the user's permissions to grant or deny access to specific resources or actions. Authorization mechanisms include:</p> <ul> <li>Role-Based Access Control (RBAC): Users are assigned roles, and permissions are assigned to those roles.</li> <li>Access Control Lists (ACLs): Specific permissions are assigned to users or groups for various resources.</li> <li>Policy-Based Access Control (PBAC): Policies define the conditions under which access is granted.   Authorization answers the question: \"What are you allowed to do?\"</li> </ul>"},{"location":"azure/az900/basics/#summary","title":"Summary","text":"<ul> <li>Identity: Establishes who a user or entity is.</li> <li>Authentication: Verifies that the user or entity is who they claim to be.</li> <li>Authorization: Determines what the authenticated user or entity is allowed to do within the system.</li> </ul>"},{"location":"azure/az900/identityAuthenticationAuthorization/","title":"Azure Identity, Authentication, and Authorization","text":"<p>Azure Entra ID, formerly known as Azure Active Directory (Azure AD), is a cloud-based identity and access management service provided by Microsoft. It is designed to help organizations manage and secure their digital identities and resources. Key features and functions of Azure Entra ID include:</p> <ul> <li>Identity Management: Manages user identities and ensures secure authentication and authorization.</li> <li>Access Management: Controls access to applications and resources within the organization.</li> <li>Single Sign-On (SSO): Allows users to access multiple applications with one set of credentials.</li> <li>Multi-Factor Authentication (MFA): Enhances security by requiring two or more verification methods.</li> <li>Conditional Access: Provides policies to enforce specific requirements for accessing resources.</li> <li>Self-Service Password Reset: Enables users to reset their passwords without IT assistance.</li> <li>B2B Collaboration: Allows secure collaboration with external partners by granting them access to internal resources.</li> <li>B2C Identity Management: Manages customer identities for applications.</li> <li>Application Management: Integrates with a wide range of applications for streamlined access and management.</li> <li>Azure Entra ID is a critical component for securing and managing access to Microsoft services and other integrated applications, making it an essential tool for enterprises leveraging Microsoft cloud solutions.</li> </ul>"},{"location":"azure/az900/identityAuthenticationAuthorization/#azure-active-directory","title":"Azure Active Directory","text":"<ul> <li>Microsoft Entra is a product family that includes Azure AD/Microsoft Entra Id</li> <li>Active Directory (AD) is not the same as Azure AD/ Microsoft Entra ID</li> <li>Every Azure account will have an Azure AD/Entra ID service</li> <li>A tenant is a dedicated instance of Azure AD/Entra ID. It represents your organization in Azure</li> <li>A user can only be a member of up to 500 tenants</li> <li>A subscription is a billin entity. All resources can only belong to a single subscription.</li> <li>Azure AD/Entra ID is the identity, authorization, and management service buildt in to Azure.</li> </ul>"},{"location":"azure/az900/identityAuthenticationAuthorization/#zero-trust-concepts","title":"Zero Trust Concepts","text":"<p>All users assumed untrustworthy unless proven otherwise</p> <ul> <li>Trusted by identity</li> <li>Regardless of location (trusted/untrusted networks)</li> <li>Least priviledge access - just enough permissions to perform the job</li> <li>Simplified, centralized mamagement</li> </ul> <p>Zero Trust = No presumed trust, but idemtities can be validated. No trusted locations.</p>"},{"location":"azure/az900/identityAuthenticationAuthorization/#multi-factor-authenticatin","title":"Multi-Factor Authenticatin","text":"<ul> <li>Multi-factor authentication provides layered security for user identity.</li> <li>It requires at least two components of:</li> <li>Something you know</li> <li>Someting you have</li> <li>Something you are</li> <li>MFA is a recommended security feature by Microsoft for all Microsoft identities.</li> </ul>"},{"location":"azure/az900/identityAuthenticationAuthorization/#conditional-access","title":"Conditional Access","text":"<ul> <li>Conditional Access is a feature that provides an additional layer of security to your environments and identities.</li> <li>Conditional Access rules are essentially if/then statements that permit or deny access depending on whether the rules are met.</li> <li>Multi-factor authentication os pften impelmented with Conditional Access as further security.</li> <li>Microsoft recommends the use of MFA and Conditional Access</li> </ul>"},{"location":"azure/az900/identityAuthenticationAuthorization/#passwordless-authentication","title":"Passwordless Authentication","text":"<p>Increase convenience while staying secure Remove password from login and replace with:</p> <ul> <li>Something you have (phone/key fob)</li> <li>Something you know/are (on device)</li> <li>Fingerprint/Face unlock</li> </ul>"},{"location":"azure/az900/identityAuthenticationAuthorization/#external-guest-access","title":"External Guest Access","text":"<ul> <li>External guest access enables security outside of your organizational boundaries.</li> <li>Provides visibility of external guest activity within your organizational IT borders.</li> <li>Business-to-business (B2B) access provides a federated level of trust for tenants.</li> </ul>"},{"location":"azure/az900/identityAuthenticationAuthorization/#azure-active-directory-domain-services","title":"Azure Active Directory Domain Services","text":"<ul> <li>Azure Active Directory Domain Services (Azure AD DS) provide legacy AD features inside of Azure.</li> <li>Azure AD DS is a managed service inside of Azure. There is no maintenance if infrastructure required for the user.</li> <li>Integrates with Entra ID/Azure AD.</li> <li>Helpful when migrating or integrating legacy applications that do not support modern protocols.</li> </ul>"},{"location":"azure/az900/identityAuthenticationAuthorization/#managing-access-to-resources-with-role-based-access-control-rbac","title":"Managing Access to Resources with Role-Based Access Control (RBAC)","text":"<ul> <li>Control access (to resources and services) based on role (assigned to the user, device, application, or service).</li> <li>Least priviledgeL only the permission necessary</li> <li>Role segregation: separate duties and responsibilities; avoid combining roles that grant conflicting permissions or excessive access</li> <li>Review, audit, and document: check, double check, and write it down</li> </ul>"},{"location":"azure/az900/notes/","title":"Microsoft Azure Fundamentals (AZ-900)","text":""},{"location":"azure/az900/notes/#storage-and-data-management","title":"Storage and Data Management","text":"<ul> <li>Azure Blob Storage: Object storage solution optimized for massive amounts of unstructured data.</li> <li>Azure Files: Serverless cloud file sharing system, accessible via SMB, NFS, or Azure Files REST API.</li> <li>Azure File Sync: Centralizes file shares in Azure Files.</li> <li>Azure Data Box: Physical migration service for transferring data via a Microsoft-provided physical device.</li> <li>Azure Storage Explorer: GUI-based app for managing files and blobs in Azure Storage Account.</li> <li>Table Storage: Non-relational structured data storage providing a key/attribute store with a schemaless design.</li> <li>Queue Storage: Storage for a large number of messages.</li> <li>Geo-Redundant Storage (GRS): Replicates data in two regions in a locally redundant storage (LRS) manner.</li> <li>Geo-Zone-Redundant Storage (GZRS): Replicates data across three availability zones in the primary region and in a second region.</li> <li>Locally Redundant Storage (LRS): Replicates data three times within a single data center in the primary region.</li> <li>Zone-Redundant Storage (ZRS): Replicates Azure Storage data across three Azure availability zones in the primary region.</li> </ul>"},{"location":"azure/az900/notes/#identity-and-security","title":"Identity and Security","text":"<ul> <li>Azure Active Directory (Azure AD): Cloud-based identity management with features like single sign-on (SSO), multi-factor authentication (MFA), and conditional access.</li> <li>Azure Active Directory Domain Services: Provides managed domain services.</li> <li>Azure Advanced Threat Protection (ATP): Detects and investigates security incidents across networks.</li> <li>Azure Security Center: Monitors security configuration and health of workloads.</li> <li>Azure Sentinel: SIEM tool for responding to threats.</li> <li>Azure Key Vault: Manages secrets.</li> <li>Azure Information Protection (AIP): Controls security properties of data, like classification.</li> <li>Microsoft Defender for Cloud: Provides cloud security posture management and threat protection.</li> <li>Compliance Manager: Tool to assess compliance requirements.</li> </ul>"},{"location":"azure/az900/notes/#compute-and-networking","title":"Compute and Networking","text":"<ul> <li>Azure Virtual Machines (VMs): Virtual machines running on Azure.</li> <li>Azure Virtual Network (vNet): Enables private network in Azure, allowing virtual machines to securely communicate.</li> <li>Azure VPN Gateway: Sends encrypted traffic between Azure virtual network and on-premises location.</li> <li>Azure Bastion: Provides remote access to virtual machines via a browser and Azure portal.</li> <li>Azure Load Balancer: Distributes incoming network traffic evenly.</li> <li>Azure ExpressRoute: Connects on-premises networks to Microsoft cloud via a connectivity provider.</li> <li>Azure Container Instances: Runs applications in containers without managing virtual machines.</li> <li>Azure Kubernetes Service (AKS): Deploys and scales containers.</li> <li>Availability Set: Ensures maximum availability by logically grouping virtual machines.</li> <li>Availability Zone: Provides fault isolation within an Azure region.</li> <li>Virtual Machine Scale Set: Group of identical, load-balanced virtual machines.</li> <li>Internal Load Balancer: Balances traffic inside a virtual network.</li> <li>Public Load Balancer: Provides outbound connections for virtual machines inside a virtual network.</li> </ul>"},{"location":"azure/az900/notes/#application-services-and-development","title":"Application Services and Development","text":"<ul> <li>Azure App Service: HTTP-based service for hosting web applications, REST APIs, and mobile backends.</li> <li>Azure Functions: Event-driven, serverless compute service.</li> <li>Azure DevOps: Set of collaborative development tools built for the cloud.</li> <li>Azure Pipelines: Tool for continuous building, testing, and deploying.</li> <li>Azure Repos: Git repositories for source control.</li> <li>Azure Resource Manager (ARM) Template: Defines the infrastructure and configuration for a project.</li> <li>Azure DevTest Labs: Provides development and test environments with reusable templates and artifacts.</li> <li>Azure Application Insights: Monitors running applications, detects performance anomalies, and provides analytics tools.</li> </ul>"},{"location":"azure/az900/notes/#monitoring-and-management","title":"Monitoring and Management","text":"<ul> <li>Azure Monitor: Collects, analyzes, and responds to telemetry from cloud and on-premises environments. Supports autoscaling.</li> <li>Azure Log Analytics: Tool for writing log queries on data gathered by Azure Monitor.</li> <li>Azure Advisor: Recommends optimizations for high availability, security, performance, operational excellence, and cost.</li> <li>Azure Migrate: Helps migrate from an on-premises environment to the cloud.</li> <li>Azure Service Health: Alerts for Azure service incidents and planned maintenance.</li> <li>Azure Cost Management Tool: Checks Azure resource costs, creates alerts based on resource spend, and automates management of resources.</li> <li>Total Cost of Ownership (TCO) Calculator: Calculates cost savings of operating a solution in Azure compared to on-premises.</li> </ul>"},{"location":"azure/az900/notes/#specialized-services","title":"Specialized Services","text":"<ul> <li>Azure Arc: Provides a consistent multi-cloud and on-premises management platform.</li> <li>Azure Batch: Large-scale job scheduling and compute management.</li> <li>Azure Blueprints: Defines a repeatable set of Azure resources adhering to organizational standards.</li> <li>Azure CycleCloud: Manages high-performance computing (HPC) environments.</li> <li>Azure Sphere: Internet of Things (IoT) device platform.</li> <li>Azure VMware Solution: Runs VMware workloads in Azure with seamless integration.</li> <li>Azure Virtual Desktop: Cloud-hosted version of Windows.</li> </ul>"},{"location":"azure/az900/notes/#general-concepts","title":"General Concepts","text":"<ul> <li>Infrastructure as a Service (IaaS): Cloud provider maintains hardware, network connectivity, and physical security.</li> <li>Platform as a Service (PaaS): Cloud provider maintains infrastructure and middleware, allowing focus on application development.</li> <li>Software as a Service (SaaS): Cloud provider delivers fully functional applications over the internet.</li> <li>Elasticity: Automatic increase or decrease of resources based on demand.</li> <li>Scalability: Ability to increase or decrease resources.</li> <li>Vertical Scaling: Increasing or decreasing resources (e.g., CPU, RAM) of a single instance.</li> <li>Horizontal Scaling: Adding more instances (e.g., additional VMs or containers).</li> <li>Resiliency: Ability of a system to recover from failures and continue to function.</li> </ul>"},{"location":"azure/az900/notes/#networking-and-connectivity","title":"Networking and Connectivity","text":"<ul> <li>Network Security Group: Filters network traffic between Azure resources in an Azure virtual network.</li> <li>Service Endpoint: Exposes and connects Azure services to a virtual network.</li> <li>Local Network Gateway: Represents the on-premises location for routing purposes.</li> <li>Peering: Linking virtual networks together.</li> <li>Application Security Group: Configures application\u2019s network security as a group of virtual machines.</li> <li>Gateway Subnet: IP address range of a virtual network where resources and services operate.</li> </ul>"},{"location":"azure/az900/notes/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>Fabric Controller: Special software running in a server connected to the orchestrator.</li> <li>Orchestrator: Manages everything in Azure, responding to user requests and forwarding them to the fabric controller.</li> <li>Cloud Solution Provider (CSP): Microsoft Partner organization offering Azure services.</li> <li>Microsoft Managed Desktop: Subscription-based desktop-as-a-service (DaaS) cloud platform.</li> <li>Microsoft Service Trust Portal: Portal with various resources about Microsoft security, privacy, and compliance practices.</li> <li>Sovereign Region: Region isolated from the main instance of Azure.</li> <li>Management Group: Grouping of multiple subscriptions.</li> <li>Subscription: Isolated area where Azure resources are created and managed.</li> </ul>"},{"location":"computer_science/solid/","title":"Overview of SOLID Principles for Software Development","text":"<p>The SOLID principles are a set of design principles in object-oriented software development that help developers create systems that are more maintainable, scalable, and flexible. They were introduced by Robert C. Martin, also known as \"Uncle Bob.\" Here's a breakdown of each principle along with a brief explanation and relevant links for further reading:</p>"},{"location":"computer_science/solid/#1-single-responsibility-principle-srp","title":"1. Single Responsibility Principle (SRP)","text":"<ul> <li>Definition: A class should have only one reason to change, meaning it should have only one job or responsibility.</li> <li>Explanation: This principle advocates for separating different concerns into distinct classes, making the system more modular and easier to manage. When a class has only one responsibility, it's easier to understand and modify without affecting other parts of the system.</li> <li> <p>Further Reading:</p> </li> <li> <p>Single Responsibility Principle on Baeldung</p> </li> <li>SRP by Robert C. Martin</li> </ul>"},{"location":"computer_science/solid/#2-openclosed-principle-ocp","title":"2. Open/Closed Principle (OCP)","text":"<ul> <li>Definition: Software entities (classes, modules, functions, etc.) should be open for extension but closed for modification.</li> <li>Explanation: This principle promotes writing code that can be extended without changing its existing behavior. This is often achieved through polymorphism, where new functionalities can be added by creating new classes that inherit from existing ones.</li> <li> <p>Further Reading:</p> </li> <li> <p>Open/Closed Principle on Baeldung</p> </li> <li>OCP by Robert C. Martin</li> </ul>"},{"location":"computer_science/solid/#3-liskov-substitution-principle-lsp","title":"3. Liskov Substitution Principle (LSP)","text":"<p>Definition: Subtypes must be substitutable for their base types without altering the correctness of the program. Explanation: This principle ensures that a derived class can be used in place of its base class without causing unexpected behavior. It emphasizes the importance of inheritance hierarchies where derived classes extend the base class without changing its fundamental behavior. Further Reading:</p> <ul> <li>Liskov Substitution Principle on Baeldung</li> <li>LSP on Dev.to</li> </ul>"},{"location":"computer_science/solid/#4-interface-segregation-principle-isp","title":"4. Interface Segregation Principle (ISP)","text":"<ul> <li>Definition: Clients should not be forced to depend on interfaces they do not use.</li> <li>Explanation: This principle advises against creating large, monolithic interfaces. Instead, it encourages creating smaller, more specific interfaces that clients can implement as needed. This results in more modular and flexible code.</li> <li> <p>Further Reading:</p> </li> <li> <p>Interface Segregation Principle on Baeldung</p> </li> <li>ISP on Dev.to</li> </ul>"},{"location":"computer_science/solid/#5-dependency-inversion-principle-dip","title":"5. Dependency Inversion Principle (DIP)","text":"<ul> <li>Definition: High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g., interfaces). Abstractions should not depend on details; details should depend on abstractions.</li> <li>Explanation: This principle promotes the decoupling of software components by relying on abstractions rather than concrete implementations. This makes the system more flexible and easier to maintain, as changes to low-level components do not affect high-level components.</li> <li> <p>Further Reading:</p> </li> <li> <p>Dependency Inversion Principle on Baeldung</p> </li> <li>DIP on Dev.to</li> </ul>"},{"location":"computer_science/solid/#additional-resources","title":"Additional Resources:","text":"<p>Uncle Bob's SOLID Principles on Wikipedia</p> <ul> <li>Uncle Bob's SOLID Principles on Wikipedia</li> <li>SOLID Principles by Robert C. Martin (Original Article)</li> </ul> <p>These principles are fundamental to creating well-structured and maintainable code. Understanding and applying them can significantly improve the quality of your software development projects.</p>"},{"location":"gcp/gcp/","title":"GCP","text":"<p>Hello from GCP</p>"},{"location":"kubernetes/kubernetes/","title":"Overview","text":"<p>Hello</p>"},{"location":"kubernetes/namespaces/","title":"Namespaces","text":"<p>What is a Namespace Namespaces are virtual clusters backed by the same physical cluster. Kubernetes objects, such as pods and containers, live in namespaces. Namespaces are a way to seperate and organize objects in your cluster.</p>"},{"location":"kubernetes/overview/","title":"Overview","text":"<p>What is Kubernetes? Kubernetes, often abbreviated as K8s, is an open-source platform designed to automate deploying, scaling, and operating containerized applications. Originally developed by Google, it is now maintained by the Cloud Native Computing Foundation (CNCF). Kubernetes provides a framework to run distributed systems resiliently, managing the lifecycle of containers across a cluster of machines.</p> <p>How Kubernetes Works Kubernetes orchestrates containers across multiple hosts, providing a unified interface for managing them. It abstracts the underlying infrastructure, allowing developers and operators to focus on application logic and policies rather than the specifics of the environment. Here's a simplified breakdown of how it works:</p> <p>Containers and Pods:</p> <p>Container: A lightweight, portable, and self-sufficient software package that includes the application code and all its dependencies. Pod: The smallest deployable unit in Kubernetes, which can consist of one or more containers. Containers in the same Pod share the same network namespace and can communicate with each other easily. Nodes and Clusters:</p> <p>Node: A worker machine in Kubernetes, which can be either a physical or virtual machine. Each Node runs at least one container runtime (like Docker) and the necessary Kubernetes components. Cluster: A set of Nodes that Kubernetes manages. The cluster is the environment where your applications run. Control Plane:</p> <p>API Server: The core of Kubernetes' control plane, it exposes the Kubernetes API and is the entry point for all administrative tasks. Scheduler: Watches for new Pods with no assigned Node and assigns them to a Node based on resource requirements and policies. Controller Manager: A daemon that runs various controllers to handle routine tasks like scaling, rolling updates, and health checks. etcd: A key-value store that Kubernetes uses to store all cluster data. It acts as the brain of Kubernetes, keeping track of the state of the cluster. Kubelet:</p> <p>An agent that runs on each Node. It ensures that containers are running in a Pod and communicates with the Kubernetes API server. Kube-Proxy:</p> <p>A network proxy that runs on each Node, managing networking rules for Pods and providing service discovery and load balancing. Container Runtime:</p> <p>The software responsible for running the containers. While Docker is a common runtime, Kubernetes supports other runtimes such as containerd and CRI-O. Reasons to Use Kubernetes Scalability: Automatically scale your applications up and down based on demand. Portability: Run applications in a consistent environment across different environments like on-premises, public, or private cloud. Resilience: Kubernetes automatically replaces or reschedules containers when they fail, maintaining the desired state of your applications. Automated Rollouts and Rollbacks: Safely roll out changes to your application or configuration and roll back in case of failure. Efficient Resource Utilization: Kubernetes packs containers efficiently onto your Nodes, optimizing resource use. Self-Healing: Automatically restarts containers that fail, replaces and reschedules them, kills containers that don't respond to your user-defined health check, and doesn't advertise them to clients until they're ready to serve. Kubernetes Architecture Overview Here's a high-level overview of the Kubernetes architecture:</p> <p>Master Node (Control Plane):</p> <p>API Server: Handles all RESTful requests to manage the cluster (e.g., deployments, scaling, etc.). Scheduler: Assigns workloads to Nodes based on resource availability. Controller Manager: Manages controllers, which enforce the desired state of the cluster. etcd: Stores all data needed to manage the cluster. Worker Nodes:</p> <p>Kubelet: Communicates with the API Server and manages the containers running on the Node. Kube-Proxy: Handles networking for Pods running on the Node. Container Runtime: Pulls and runs container images. Objects:</p> <p>Pods: The basic deployable unit in Kubernetes, which can run one or more containers. Services: Abstracts the networking in Kubernetes, providing a stable IP address and DNS name for a set of Pods. Deployments: Provides declarative updates to Pods and ReplicaSets (which ensure a specified number of pod replicas are running at any given time). ConfigMaps/Secrets: Manage configuration data separately from container images. Networking:</p> <p>Kubernetes abstracts away the complexities of networking. Pods can communicate with each other across Nodes, and Services provide a unified interface for accessing Pods. Conclusion Kubernetes is a powerful orchestration tool that helps you manage containerized applications at scale. It automates many of the manual processes involved in deploying and scaling applications, providing a resilient, portable, and flexible environment for running modern, cloud-native applications. Its architecture, based on a master-worker model, ensures that applications run efficiently and reliably across different environments.</p> <p>Certified Kubernetes Application Developer Certified Kubernetes Administrator</p>"},{"location":"kubernetes/cka/cka/","title":"CKA","text":"<p>Hello</p>"},{"location":"kubernetes/ckad/ckad/","title":"CKAD","text":"<p>Hello from ckad</p>"},{"location":"kubernetes/ckad/kubernetesCluster/","title":"Kubernetes Cluster Architecture","text":""},{"location":"kubernetes/ckad/kubernetesCluster/#control-plane-components","title":"Control Plane Components","text":"<ol> <li> <p>etcd</p> </li> <li> <p>Description: A consistent and highly-available key-value store used as Kubernetes' backing store for all cluster data.</p> </li> <li> <p>Role: Stores configuration data that can be accessed by each of the nodes in the cluster.</p> </li> <li> <p>kube-apiserver</p> </li> <li> <p>Description: The API server is a component of the Kubernetes control plane that exposes the Kubernetes API.</p> </li> <li> <p>Role: It serves as the frontend for the Kubernetes control plane. It is the only component that communicates directly with the etcd datastore.</p> </li> <li> <p>kube-scheduler</p> </li> <li> <p>Description: The scheduler is responsible for assigning nodes to the newly created pods.</p> </li> <li> <p>Role: It watches for newly created pods with no assigned node and selects a node for them to run on based on resource availability.</p> </li> <li> <p>kube-controller-manager</p> </li> <li> <p>Description: This component runs controllers, which are background threads that handle routine tasks.</p> </li> <li> <p>Role: Controllers include node controller, replication controller, endpoints controller, and others, each handling specific tasks to ensure the cluster's desired state.</p> </li> <li> <p>cloud-controller-manager</p> </li> <li>Description: Allows the Kubernetes cluster to interact with the cloud provider's API to manage cloud services.</li> <li>Role: It manages cloud-specific control logic, such as managing load balancers, handling node lifecycle events, and managing storage volumes.</li> </ol>"},{"location":"kubernetes/ckad/kubernetesCluster/#node-components","title":"Node Components","text":"<ol> <li> <p>kubelet</p> </li> <li> <p>Description: An agent that runs on each node in the cluster.</p> </li> <li> <p>Role: Ensures that containers are running in a pod. The kubelet takes a set of PodSpecs and ensures that the described containers are running and healthy.</p> </li> <li> <p>kube-proxy</p> </li> <li> <p>Description: A network proxy that runs on each node in your cluster.</p> </li> <li> <p>Role: It maintains network rules on nodes and enables communication to your pods from network sessions inside or outside of your cluster.</p> </li> <li> <p>Container Runtime</p> </li> <li>Description: The software responsible for running containers.</li> <li>Role: Kubernetes supports several container runtimes: Docker, containerd, CRI-O, etc. It is the component that executes and manages containers.</li> </ol>"},{"location":"kubernetes/ckad/kubernetesCluster/#additional-components","title":"Additional Components","text":"<ol> <li> <p>Pods</p> </li> <li> <p>Description: The smallest and simplest Kubernetes object. A pod represents a set of running containers on your cluster.</p> </li> <li> <p>Role: Pods can contain one or more containers, and they share the network namespace, meaning they can communicate with each other directly.</p> </li> <li> <p>Namespaces</p> </li> <li> <p>Description: A way to divide cluster resources between multiple users.</p> </li> <li> <p>Role: Useful for environments with many users spread across different teams or projects, providing a scope for names.</p> </li> <li> <p>ReplicaSets</p> </li> <li> <p>Description: Ensures that a specified number of pod replicas are running at any given time.</p> </li> <li> <p>Role: It is responsible for maintaining the stable set of pod replicas and can be used directly or by Deployments.</p> </li> <li> <p>Deployments</p> </li> <li> <p>Description: Provides declarative updates to applications.</p> </li> <li> <p>Role: Manages ReplicaSets and provides rollback capabilities, enabling updates to the state of Pods and ReplicaSets.</p> </li> <li> <p>Services</p> </li> <li> <p>Description: An abstract way to expose an application running on a set of Pods as a network service.</p> </li> <li> <p>Role: Services allow your applications to receive traffic, with different types like ClusterIP, NodePort, and LoadBalancer.</p> </li> <li> <p>ConfigMaps</p> </li> <li> <p>Description: Provides a way to inject configuration data into Pods.</p> </li> <li> <p>Role: Decouple configuration artifacts from image content to keep containerized applications portable.</p> </li> <li> <p>Secrets</p> </li> <li> <p>Description: Similar to ConfigMaps but specifically intended to hold sensitive information.</p> </li> <li> <p>Role: Manages sensitive data such as passwords, OAuth tokens, and ssh keys.</p> </li> <li> <p>Ingress</p> </li> <li> <p>Description: A collection of rules that allow inbound connections to reach the cluster services.</p> </li> <li> <p>Role: Configures access to cluster services from outside the Kubernetes cluster, typically HTTP/S.</p> </li> <li> <p>Volumes</p> </li> <li> <p>Description: A directory accessible to containers in a pod.</p> </li> <li> <p>Role: Kubernetes supports several types of volumes like emptyDir, hostPath, and persistent volumes, each with different characteristics.</p> </li> <li> <p>Persistent Volumes (PV) and Persistent Volume Claims (PVC)</p> <ul> <li>Description: PVs are storage resources in the cluster, and PVCs are requests for storage by a user.</li> <li>Role: They provide a way to dynamically or statically provision storage to pods in a cluster.</li> </ul> </li> </ol>"},{"location":"kubernetes/ckad/kubernetesCluster/#conclusion","title":"Conclusion","text":"<p>Kubernetes architecture is designed to ensure that applications are efficiently deployed, scaled, and managed. Each component plays a critical role in maintaining the cluster's functionality, resilience, and scalability.</p>"},{"location":"kubernetes/cluster_setup/cluster_setup/","title":"Setting Up a Self-Managed Kubernetes Cluster on GCP with GCE","text":"<p>This guide provides step-by-step instructions for setting up a Kubernetes cluster on Google Cloud Platform (GCP) using Google Compute Engine (GCE). The cluster consists of one master node and two worker nodes. This setup is ideal for learning Kubernetes, testing, and small-scale deployments.</p>"},{"location":"kubernetes/cluster_setup/cluster_setup/#1-setup-gcp-infrastructure","title":"1. Setup GCP Infrastructure","text":"<p>Setting up the infrastructure on GCP is the foundation of your Kubernetes cluster. This involves creating virtual machines (VMs) that will serve as the nodes in your cluster. Terraform, an Infrastructure as Code (IaC) tool, is used to automate the creation and management of these resources, ensuring consistency, repeatability, and ease of modification.</p>"},{"location":"kubernetes/cluster_setup/cluster_setup/#step-1-initialize-terraform","title":"Step 1: Initialize Terraform","text":"<p>Initialize Terraform to download necessary plugins and prepare your working directory:</p> <pre><code>terraform init\nterraform plan\nterraform apply -auto-approve\nterraform output &gt; terraform-outputs.txt\nThis command sequence initializes Terraform, generates an execution plan, applies the plan to create resources, and then saves the outputs (such as VM IP addresses) to a file for later use.\n</code></pre>"},{"location":"kubernetes/cluster_setup/cluster_setup/#2-install-kubernetes-components","title":"2. Install Kubernetes Components","text":""},{"location":"kubernetes/cluster_setup/cluster_setup/#step-1-ssh-into-each-vm","title":"Step 1: SSH into Each VM","text":"<p>SSH into each VM created by Terraform to install necessary components. Use the VM names from <code>terraform-outputs.txt</code>:</p> <pre><code>gcloud compute ssh --zone \"europe-west6-a\" \"k8s-master\" --project \"codify-playground-yannick\"\ngcloud compute ssh --zone \"europe-west6-a\" \"k8s-worker-1\" --project \"codify-playground-yannick\"\ngcloud compute ssh --zone \"europe-west6-a\" \"k8s-worker-2\" --project \"codify-playground-yannick\"\n</code></pre>"},{"location":"kubernetes/cluster_setup/cluster_setup/#step-2-install-containerd","title":"Step 2: Install <code>containerd</code>","text":"<p>We will install <code>containerd</code>, which is the preferred container runtime for Kubernetes.</p> <p>Ensure that necessary kernel modules are loaded:</p> <pre><code>cat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n</code></pre> <p>Configure sysctl parameters to meet Kubernetes networking requirements:</p> <pre><code>cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward = 1\nEOF\n\n\n# Apply the sysctl parameters without rebooting:\nsudo sysctl --system\n</code></pre> <p>These steps enable IP forwarding and ensure that bridged network traffic is properly processed by iptables.</p> <p>Download the containerd binaries and extract them to <code>/usr/local</code>:</p> <pre><code>wget https://github.com/containerd/containerd/releases/download/v1.7.11/containerd-1.7.11-linux-amd64.tar.gz\nsudo tar Cxzvf /usr/local containerd-1.7.11-linux-amd64.tar.gz\n</code></pre> <p>Generate the default configuration for <code>containerd</code>:</p> <pre><code>sudo mkdir /etc/containerd\ncontainerd config default &gt; config.toml\nsudo cp config.toml /etc/containerd\n</code></pre> <p>Download the systemd service file for <code>containerd</code>, enable the service, and start it:</p> <pre><code>wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service\nsudo cp containerd.service /etc/systemd/system/\nsudo systemctl daemon-reload\nsudo systemctl enable --now containerd\n</code></pre> <p>Verify that containerd is running:</p> <pre><code>sudo systemctl status containerd\n</code></pre>"},{"location":"kubernetes/cluster_setup/cluster_setup/#step-3-install-kubeadm-kubelet-and-kubectl","title":"Step 3: Install kubeadm, kubelet, and kubectl","text":"<p>Install the necessary Kubernetes components on all VMs (master and worker nodes):</p> <pre><code>sudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\nsudo mkdir -p -m 755 /etc/apt/keyrings\ncurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl\nsudo apt-mark hold kubelet kubeadm kubectl\nsudo systemctl enable --now kubelet\n</code></pre>"},{"location":"kubernetes/cluster_setup/cluster_setup/#step-4-install-runc","title":"Step 4: Install runc","text":"<p>While containerd is the Container Runtime Interface (CRI), runc is the actual runtime used by containerd. Install it as follows:</p> <pre><code>wget https://github.com/opencontainers/runc/releases/download/v1.1.10/runc.amd64\nsudo install -m 755 runc.amd64 /usr/local/sbin/runc\n</code></pre>"},{"location":"kubernetes/cluster_setup/cluster_setup/#step-5-install-cni-plugin-for-containerd","title":"Step 5: Install CNI Plugin for containerd","text":"<p>containerd requires a CNI plugin to manage network interfaces. Install the CNI plugins:</p> <pre><code>wget https://github.com/containernetworking/plugins/releases/download/v1.4.0/cni-plugins-linux-amd64-v1.4.0.tgz\nsudo mkdir -p /opt/cni/bin\nsudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.4.0.tgz\n</code></pre>"},{"location":"kubernetes/cluster_setup/cluster_setup/#step-6-configure-containerd-with-systemd-cgroup-driver","title":"Step 6: Configure containerd with Systemd Cgroup Driver","text":"<p>To ensure compatibility with Kubernetes, configure the systemd cgroup driver in the /etc/containerd/config.toml file. Set SystemdCgroup to true:</p> <pre><code>sudo vim /etc/containerd/config.toml\n</code></pre> <p>Locate the following section and update it:</p> <pre><code>[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n  ...\n    [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\nSystemdCgroup = true\n</code></pre> <p>After updating, restart containerd:</p> <pre><code>sudo systemctl restart containerd\nsudo systemctl status containerd\n</code></pre>"},{"location":"kubernetes/cluster_setup/cluster_setup/#step-7-disable-swap","title":"Step 7: Disable Swap","text":"<p>Kubernetes requires swap to be disabled:</p> <pre><code>sudo swapoff -a\n</code></pre>"},{"location":"kubernetes/cluster_setup/cluster_setup/#3-initialize-the-kubernetes-control-plane","title":"3. Initialize the Kubernetes Control Plane","text":""},{"location":"kubernetes/cluster_setup/cluster_setup/#step-1-initialize-the-control-plane","title":"Step 1: Initialize the Control Plane","text":"<p>Initialize the Kubernetes control plane on the k8s-master node:</p> <pre><code>sudo kubeadm init --pod-network-cidr=10.244.0.0/16\n</code></pre> <p>This command sets up the control plane components (API server, scheduler, and controller manager) and configures the network with the specified CIDR range for pods.</p>"},{"location":"kubernetes/cluster_setup/cluster_setup/#step-2-configure-kubectl-for-the-master-node","title":"Step 2: Configure kubectl for the Master Node","text":"<p>Set up kubectl to manage the cluster from the master node:</p> <pre><code>mkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n</code></pre>"},{"location":"kubernetes/cluster_setup/cluster_setup/#step-3-enable-shell-completion-for-kubectl","title":"Step 3: Enable Shell Completion for kubectl","text":"<p>For a better command-line experience, enable shell completion for kubectl:</p> <pre><code>echo 'source &lt;(kubectl completion bash)' &gt;&gt;~/.bashrc\nsource &lt;(kubectl completion bash)\n</code></pre>"},{"location":"kubernetes/cluster_setup/cluster_setup/#4-join-worker-nodes-to-the-cluster","title":"4. Join Worker Nodes to the Cluster","text":"<p>Step 1: Retrieve the Join Command After initializing the control plane, retrieve the kubeadm join command to add worker nodes to the cluster:</p> <p>bash Copy code kubeadm token create --print-join-command Step 2: Join Worker Nodes SSH into each worker node (k8s-worker-1 and k8s-worker-2) and run the kubeadm join command:</p> <p>bash Copy code sudo kubeadm join :6443 --token  --discovery-token-ca-cert-hash sha256: Replace , , and  with the actual values from the kubeadm join command."},{"location":"kubernetes/cluster_setup/cluster_setup/#5-deploy-a-pod-network","title":"5. Deploy a Pod Network","text":"<p>Step 1: Install a Pod Network Add-On To enable communication between pods across different nodes, install a pod network add-on.</p> <p>Option 1: Flannel bash Copy code kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml Wait a few moments for the network to be deployed across all nodes.</p> <p>Option 2: Calico Install the Tigera Operator:</p> <p>bash Copy code kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/tigera-operator.yaml Download the default YAML spec for Calico:</p> <p>bash Copy code wget https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/custom-resources.yaml Edit the spec to reflect the correct pod network CIDR:</p> <p>bash Copy code vim custom-resources.yaml Apply the configuration:</p> <p>bash Copy code kubectl apply -f custom-resources.yaml</p>"},{"location":"kubernetes/cluster_setup/cluster_setup/#6-verify-the-cluster","title":"6. Verify the Cluster","text":"<p>Step 1: Check Node Status Run the following command on the k8s-master to verify that all nodes have successfully joined the cluster and are in a Ready state:</p> <p>bash Copy code kubectl get nodes You should see all nodes (k8s-master, k8s-worker-1, k8s-worker-2) listed as Ready.</p>"},{"location":"kubernetes/cluster_setup/cluster_setup/#7-deploy-a-test-application","title":"7. Deploy a Test Application","text":"<p>To test that your Kubernetes cluster is functioning properly, you can deploy a simple application:</p> <p>bash Copy code kubectl create deployment nginx --image=nginx Verify that the deployment is running:</p> <p>bash Copy code kubectl get pods Expose the deployment as a service:</p> <p>bash Copy code kubectl expose deployment nginx --port=80 --type=NodePort Check the service:</p> <p>bash Copy code kubectl get svc Access the application using the external IP of any worker node and the NodePort assigned to the service.</p>"}]}